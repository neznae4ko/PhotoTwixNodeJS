// Generated by CoffeeScript 1.4.0
var BUF_LENGTH, copyFileSync, cpr, fs, mkdirp, path, _buff;

fs = require('fs');

path = require('path');

mkdirp = require('mkdirp');

BUF_LENGTH = 64 * 1024;

_buff = new Buffer(BUF_LENGTH);

copyFileSync = function(srcFile, destFile) {
  var bytesRead, pos, rfd, wfd;
  rfd = fs.openSync(srcFile, "r");
  wfd = fs.openSync(destFile, "w");
  bytesRead = 1;
  pos = 0;
  while (bytesRead > 0) {
    bytesRead = fs.readSync(rfd, _buff, 0, BUF_LENGTH, pos);
    fs.writeSync(wfd, _buff, 0, bytesRead);
    pos += bytesRead;
  }
  fs.closeSync(rfd);
  return fs.closeSync(wfd);
};

cpr = function(source, dest) {
  var destPath, file, filenames, statsDest, statsSrc, _i, _len, _results;
  statsSrc = fs.statSync(source);
  try {
    statsDest = fs.statSync(dest);
  } catch (err) {
    if ((err.code != null) && err.code === 'ENOENT') {
      statsDest = null;
    } else {
      throw err;
    }
  }
  if (statsSrc.isFile()) {
    if (statsDest === null || statsDest.isDirectory()) {
      dest = path.join(dest, path.basename(source));
      return copyFileSync(source, dest);
    } else {
      return copyFileSync(source, dest);
    }
  } else {
    if (statsSrc.isDirectory()) {
      destPath = path.join(dest, path.basename(source));
      mkdirp.sync(destPath);
      filenames = fs.readdirSync(source);
      _results = [];
      for (_i = 0, _len = filenames.length; _i < _len; _i++) {
        file = filenames[_i];
        _results.push(cpr(path.join(source, file), destPath));
      }
      return _results;
    }
  }
};

module.exports = cpr;
